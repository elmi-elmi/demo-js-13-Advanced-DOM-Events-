-----------------------------------------------------------------------
        Udemy - The Complete JavaScript Course 2022 From
                    Zero to Expert! 2021-11
                        Jonas Schmedtmann
-----------------------------------------------------------------------
01 - Welcome welcome welcome ✔️
02 - Javascript Fundamental - Part1 ✔️
03 - Javascript Fundamental - Part2 ✔️
04 - How to Navigate This Course ✔️
05 - Developer Skills & Editor Setup ✔️
06 - [OPTIONAL] HTML & CSS Crash Course ✔️
-----------------------------------------------------------------------

-----------------------------------------------------------------------
07 - JavaScript in the Browser_ DOM and Events Fundamentals ✔️
-----------------------------------------------------------------------

-----------------------------------------------------------------------
08 - How JavaScript Works Behind the Scenes ✔️
-----------------------------------------------------------------------

-----------------------------------------------------------------------
09 - Data Structures, Modern Operators and Strings ✔️
-----------------------------------------------------------------------
spread - rest - && - || - ??  (nullish coalescing) operators - optional chaining ?.
Set
Map
string
slice
trim
toUpperCase toLoweCase startsWith endsWith
includes indexOf replace // expression
split
joins
padding: padStart, padEnd
repeat
-----------------------------------------------------------------------
10 - A Closer Look at Functions ✔️
-----------------------------------------------------------------------

call
apply
bind
IIFE Immidiately Invoked function expressions
closures
[[scopes]]  --> double [[ show we can not access from our code

-----------------------------------------------------------------------
11 - Working With Arrays  ✔️
-----------------------------------------------------------------------

forEach
map
reduce
filter
find
findIndex
some
every
includes
flat
flatMap
sort
fill
************** attention
new Array(7) array with on argument generate an     empty array that length is 7
**************

Array.from({length:7}, ()=> 1)


-----------------------------------------------------------------------
12 - Numbers, Dates, Intl and Timers video 11
-----------------------------------------------------------------------
7:
    BigInt(1231231231898769163918273981273)
    or
    1231231231898769163918273981273n --> add n at end

Date:
    new Date() -- Date --  .getFullYear

    future.getFullYear
    getMonth
    getDate
    getDay --> day of week
    getHours
    getMinutes
    getSeconds
    toISOString --> standard
    getTime --> time of now in millisecond
    setFullYear

11:

Intl  (Internationalization)

    const now = new Date();
    labelDate.textContent = Intl.DateTimeFormat('fa-IR').format(now);

    add option:
    const option = {
            hour: 'numeric',
            minute: 'numeric',
            day:    'numeric',
            month:  'numeric', // ---> or 'long' -->example: August
    }

    label.textContent = Intl.DateTimeFomrmat('fa-IR', option).format(now)


google:

    iso language code --> http://www.lingoes.net/en/translator/langcode.htm

navigator:
    find local language:
        const local = navigator.language;

Intl Number format:
    const num = 23234234.231
    new Intl.NumberFormat('en-US').format(num)

    add option:
    const option = {
    //style:'unit' // percent currency ...
    // unit:'mile-per-hour' // celsuis
    style: 'currency',
    currency: 'EUR',
    // useGrouping: false // number print without separated(.)


    }

timeZone:'UTC' for convert seconds to minues

-----------------------------------------------------------------------
13 - Advanced DOM and Events video 13
-----------------------------------------------------------------------


videos 5,6:


NodeList & HTMLCollection:

    diffrence between NodeList & HTMLCollection

        querySelectorAll     ==> return NodeList
        getElementsByTagName ==> return HTMLCollection

        diff:
            getElementsByTagName ==> is live collection ==>meaning: for example if DOM changes the HTMLCollection immidiately update automatically

    classList.add
    innerHtml
    prepend()
    append()
    after()
    before()
    cloneNode(true)


get style:
        we can not get style with .style property, for example:
        message.style.color ==> return nothing

        but:
        if style is add in javascript you can.(inline style)

        for get style use this:
        getComputedStyle(message).color


css custom property:
    :root {
  --color-primary: #5ec576;
  }

    .js:
    document.documentElement.style.setProperty('--color-primary','red')


non-standard attribute:

    we can use this:
    html:
        <div designer='shahrokh'></div>
    js:
        logo.getAttribute('designer')


set attribute:

        .setAttribute('company', 'Bankist')



img src attribute:

    html: <img src:'./img/example.png'

    js:
    const logo = document.querySelector('.logo')

    if read src as below:
        log.src ---> console.log show as html addresss
    if read src as below:
        log.getAttribute('src') ---> console.log show as  the reletive address ==> ./img/example.png


Data Attribute:

    html:
        <div data-version-number='3.0' class='logo'></div>

    js:
        const logo = ...
        logo.dataset.versionNumber --> console.log: 3.0


Classes:
    logo.classList.add('c')
    logo.classList.remove('c')
    logo.classList.toggle('c')
    logo.classList.contains('c')


    **** Don't use this ↓: ****
        logo.className='c' ==>because all classess overwrite with this class


video 7:

scrollTo:
    const section1 = ...

    section1.getBoundingClientRect() --> top height width x y left ...

    e.target.getBoundingClientRect()

    windows.clientHeight
    windows.clientWidth

    depricated symbol:
    windows.pageYOffset
    windows.pageXOffset
    windows.scrollTo({left:windows.pageXOffset+windows.clientWidth
                      top:windows.pageYOffset+widnows.clientHeight,
                      behavior:'smooth'
                      }

scrollIntoView:
    section1.scrollIntoView({behavior:'smooth')}


video 8:
        Event handleling:

        .addEventListener

            other way to add event listener:

            use strictly : on

            btn.onclick === btn.addEventListener('click',...)

        .removeEventListener


        add  in html:
            <div onclick="alert('hi')" ...></div>

video 9:

        Bubbeling & Capturing

video 10:

        target
        currentTarget

        stop propagation --> stopPropagation    (stop bubbeling)

        third parameter in addEventListener:


            .addEventListener('click',function, true) ---> change default behavior:

                if true --->  (parent to child) (capturing & bubbeling



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@  OPTIMAL @@@@@@@@@@@@@@@@@@@@@@@@:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    DONT DEFINE addEventListener FOR EVERY ELEMENT
        because if there are too many elements, the tons of function copied.

        ALTERNATIVE:

            use CAPTURING & Bubbeling

EX: wrong way:
 ⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯
    document.querySelectorAll('.nav__link').forEach(function(el){
    el.addeventListener('click',function(e){
        e.preventDefault();
        const id = this.getAttribute('href');
        document.querySelector(id).scrollIntoView({behavior:'smooth'})
        }
    })
 ⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯

// CORRECT SOLUTION:
// 1. ADD EVENT LISTENER TO COMMON PARENT ELEMENT;
// 2. DETERMINE WHAT ELEMENT ORGINATE THE EVENT;

as below:

    document.querySelector('.nav__links').addeventListener('click',function(e){
    e.preventDefault();

    if(e.target.classList.contains('.nav__link')){
    const id = e.target.getAttribute('href')
    ducument.querySelector(id).scrollIntoView({behavior:'smooth'})
    }
    })


video: 14

        hoverHandle(e){     // ---> e = event, this=0.5
        }

        ....addEventListener('mouserover', hoverHandle.bind(0.5))



video 16:
⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵⤵

    Intersection observer API

    (⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯ don't use scroll event ⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯)

    const section1 = document.querySelector(...);

    const obsCallback = function(entries, observer){
    entries.forEach(entry=>console.log(entry)
    }

    cosnt obsOption = {
        root:null            // --> viewport
        threshold: 0.1  // [0, 1, 0.2]
        rootMargin: '-90px'
    }

    const observer = new IntersectionObserver(obsCallback, obsOption)

    observer.observ(section1)
⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️⤴️

video: 17

    unobserve




video 20:

    select dataset html attributes in JS :
        html:
            <button class="dots" data-slide="1"> </button>
            <button class="dots" data-slide="2"> </button>
            <button class="dots" data-slide="3"> </button>
        JS:

            document.querySelector('.dots[data-slide="${i}"])



